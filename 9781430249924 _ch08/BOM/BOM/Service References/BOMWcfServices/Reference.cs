//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.32559
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace BOM.BOMWcfServices {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Part", Namespace="http://schemas.datacontract.org/2004/07/BOM.Service.Models", IsReference=true)]
    public partial class Part : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<BOM.BOMWcfServices.BillOfMaterial> BOMPartsField;
        
        private int PartIDField;
        
        private string PartNameField;
        
        private int StockCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<BOM.BOMWcfServices.BillOfMaterial> BOMParts {
            get {
                return this.BOMPartsField;
            }
            set {
                if ((object.ReferenceEquals(this.BOMPartsField, value) != true)) {
                    this.BOMPartsField = value;
                    this.RaisePropertyChanged("BOMParts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PartID {
            get {
                return this.PartIDField;
            }
            set {
                if ((this.PartIDField.Equals(value) != true)) {
                    this.PartIDField = value;
                    this.RaisePropertyChanged("PartID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartName {
            get {
                return this.PartNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PartNameField, value) != true)) {
                    this.PartNameField = value;
                    this.RaisePropertyChanged("PartName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StockCount {
            get {
                return this.StockCountField;
            }
            set {
                if ((this.StockCountField.Equals(value) != true)) {
                    this.StockCountField = value;
                    this.RaisePropertyChanged("StockCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BillOfMaterial", Namespace="http://schemas.datacontract.org/2004/07/BOM.Service.Models", IsReference=true)]
    public partial class BillOfMaterial : object, System.ComponentModel.INotifyPropertyChanged {
        
        private BOM.BOMWcfServices.Component BOMComponentField;
        
        private int BOMIDField;
        
        private BOM.BOMWcfServices.Part BOMPartField;
        
        private int ComponentIDField;
        
        private int PartIDField;
        
        private int QuantityField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BOM.BOMWcfServices.Component BOMComponent {
            get {
                return this.BOMComponentField;
            }
            set {
                if ((object.ReferenceEquals(this.BOMComponentField, value) != true)) {
                    this.BOMComponentField = value;
                    this.RaisePropertyChanged("BOMComponent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BOMID {
            get {
                return this.BOMIDField;
            }
            set {
                if ((this.BOMIDField.Equals(value) != true)) {
                    this.BOMIDField = value;
                    this.RaisePropertyChanged("BOMID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public BOM.BOMWcfServices.Part BOMPart {
            get {
                return this.BOMPartField;
            }
            set {
                if ((object.ReferenceEquals(this.BOMPartField, value) != true)) {
                    this.BOMPartField = value;
                    this.RaisePropertyChanged("BOMPart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ComponentID {
            get {
                return this.ComponentIDField;
            }
            set {
                if ((this.ComponentIDField.Equals(value) != true)) {
                    this.ComponentIDField = value;
                    this.RaisePropertyChanged("ComponentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PartID {
            get {
                return this.PartIDField;
            }
            set {
                if ((this.PartIDField.Equals(value) != true)) {
                    this.PartIDField = value;
                    this.RaisePropertyChanged("PartID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Component", Namespace="http://schemas.datacontract.org/2004/07/BOM.Service.Models", IsReference=true)]
    public partial class Component : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<BOM.BOMWcfServices.BillOfMaterial> BOMComponentsField;
        
        private int ComponentIDField;
        
        private string ComponentNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<BOM.BOMWcfServices.BillOfMaterial> BOMComponents {
            get {
                return this.BOMComponentsField;
            }
            set {
                if ((object.ReferenceEquals(this.BOMComponentsField, value) != true)) {
                    this.BOMComponentsField = value;
                    this.RaisePropertyChanged("BOMComponents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ComponentID {
            get {
                return this.ComponentIDField;
            }
            set {
                if ((this.ComponentIDField.Equals(value) != true)) {
                    this.ComponentIDField = value;
                    this.RaisePropertyChanged("ComponentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ComponentName {
            get {
                return this.ComponentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ComponentNameField, value) != true)) {
                    this.ComponentNameField = value;
                    this.RaisePropertyChanged("ComponentName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BOMWcfServices.IBOMServices")]
    public interface IBOMServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/GetAllParts", ReplyAction="http://tempuri.org/IBOMServices/GetAllPartsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BOM.BOMWcfServices.Part>> GetAllPartsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/GetAllComponents", ReplyAction="http://tempuri.org/IBOMServices/GetAllComponentsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BOM.BOMWcfServices.Component>> GetAllComponentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/AddComponent", ReplyAction="http://tempuri.org/IBOMServices/AddComponentResponse")]
        System.Threading.Tasks.Task AddComponentAsync(BOM.BOMWcfServices.Component component);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/DeleteComponent", ReplyAction="http://tempuri.org/IBOMServices/DeleteComponentResponse")]
        System.Threading.Tasks.Task DeleteComponentAsync(BOM.BOMWcfServices.Component component);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/AddPart", ReplyAction="http://tempuri.org/IBOMServices/AddPartResponse")]
        System.Threading.Tasks.Task AddPartAsync(BOM.BOMWcfServices.Part part);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/DeletePart", ReplyAction="http://tempuri.org/IBOMServices/DeletePartResponse")]
        System.Threading.Tasks.Task DeletePartAsync(BOM.BOMWcfServices.Part part);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/AddBOM", ReplyAction="http://tempuri.org/IBOMServices/AddBOMResponse")]
        System.Threading.Tasks.Task AddBOMAsync(BOM.BOMWcfServices.BillOfMaterial bom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/RemoveBOM", ReplyAction="http://tempuri.org/IBOMServices/RemoveBOMResponse")]
        System.Threading.Tasks.Task RemoveBOMAsync(BOM.BOMWcfServices.BillOfMaterial bom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBOMServices/AddDummyData", ReplyAction="http://tempuri.org/IBOMServices/AddDummyDataResponse")]
        System.Threading.Tasks.Task AddDummyDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBOMServicesChannel : BOM.BOMWcfServices.IBOMServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BOMServicesClient : System.ServiceModel.ClientBase<BOM.BOMWcfServices.IBOMServices>, BOM.BOMWcfServices.IBOMServices {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BOMServicesClient() : 
                base(BOMServicesClient.GetDefaultBinding(), BOMServicesClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IBOMServices.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BOMServicesClient(EndpointConfiguration endpointConfiguration) : 
                base(BOMServicesClient.GetBindingForEndpoint(endpointConfiguration), BOMServicesClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BOMServicesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BOMServicesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BOMServicesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BOMServicesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BOMServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BOM.BOMWcfServices.Part>> GetAllPartsAsync() {
            return base.Channel.GetAllPartsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BOM.BOMWcfServices.Component>> GetAllComponentsAsync() {
            return base.Channel.GetAllComponentsAsync();
        }
        
        public System.Threading.Tasks.Task AddComponentAsync(BOM.BOMWcfServices.Component component) {
            return base.Channel.AddComponentAsync(component);
        }
        
        public System.Threading.Tasks.Task DeleteComponentAsync(BOM.BOMWcfServices.Component component) {
            return base.Channel.DeleteComponentAsync(component);
        }
        
        public System.Threading.Tasks.Task AddPartAsync(BOM.BOMWcfServices.Part part) {
            return base.Channel.AddPartAsync(part);
        }
        
        public System.Threading.Tasks.Task DeletePartAsync(BOM.BOMWcfServices.Part part) {
            return base.Channel.DeletePartAsync(part);
        }
        
        public System.Threading.Tasks.Task AddBOMAsync(BOM.BOMWcfServices.BillOfMaterial bom) {
            return base.Channel.AddBOMAsync(bom);
        }
        
        public System.Threading.Tasks.Task RemoveBOMAsync(BOM.BOMWcfServices.BillOfMaterial bom) {
            return base.Channel.RemoveBOMAsync(bom);
        }
        
        public System.Threading.Tasks.Task AddDummyDataAsync() {
            return base.Channel.AddDummyDataAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBOMServices)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBOMServices)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:18017/BOMServices.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return BOMServicesClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBOMServices);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return BOMServicesClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBOMServices);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IBOMServices,
        }
    }
}
